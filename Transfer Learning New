{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["!pip install \"deeplake<3\""],"metadata":{"id":"NCo5lBql_sWQ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1743699216387,"user_tz":240,"elapsed":9148,"user":{"displayName":"Aps360","userId":"06588097815320185479"}},"outputId":"1d21bcb6-0d64-4227-a7b9-ae32fc6418d0","collapsed":true},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting deeplake<3\n","  Downloading deeplake-2.8.7-py3-none-any.whl.metadata (21 kB)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from deeplake<3) (2.0.2)\n","Requirement already satisfied: pillow in /usr/local/lib/python3.11/dist-packages (from deeplake<3) (11.1.0)\n","Collecting boto3 (from deeplake<3)\n","  Downloading boto3-1.37.26-py3-none-any.whl.metadata (6.7 kB)\n","Requirement already satisfied: click in /usr/local/lib/python3.11/dist-packages (from deeplake<3) (8.1.8)\n","Collecting pathos (from deeplake<3)\n","  Downloading pathos-0.3.3-py3-none-any.whl.metadata (11 kB)\n","Collecting humbug>=0.2.6 (from deeplake<3)\n","  Downloading humbug-0.3.2-py3-none-any.whl.metadata (6.8 kB)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (from deeplake<3) (4.67.1)\n","Collecting numcodecs (from deeplake<3)\n","  Downloading numcodecs-0.15.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.9 kB)\n","Requirement already satisfied: pyjwt in /usr/local/lib/python3.11/dist-packages (from deeplake<3) (2.10.1)\n","Collecting hub>=2.8.7 (from deeplake<3)\n","  Downloading hub-3.0.1-py3-none-any.whl.metadata (389 bytes)\n","Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from humbug>=0.2.6->deeplake<3) (2.32.3)\n","Collecting botocore<1.38.0,>=1.37.26 (from boto3->deeplake<3)\n","  Downloading botocore-1.37.26-py3-none-any.whl.metadata (5.7 kB)\n","Collecting jmespath<2.0.0,>=0.7.1 (from boto3->deeplake<3)\n","  Downloading jmespath-1.0.1-py3-none-any.whl.metadata (7.6 kB)\n","Collecting s3transfer<0.12.0,>=0.11.0 (from boto3->deeplake<3)\n","  Downloading s3transfer-0.11.4-py3-none-any.whl.metadata (1.7 kB)\n","Requirement already satisfied: deprecated in /usr/local/lib/python3.11/dist-packages (from numcodecs->deeplake<3) (1.2.18)\n","Collecting ppft>=1.7.6.9 (from pathos->deeplake<3)\n","  Downloading ppft-1.7.6.9-py3-none-any.whl.metadata (12 kB)\n","Collecting dill>=0.3.9 (from pathos->deeplake<3)\n","  Downloading dill-0.3.9-py3-none-any.whl.metadata (10 kB)\n","Collecting pox>=0.3.5 (from pathos->deeplake<3)\n","  Downloading pox-0.3.5-py3-none-any.whl.metadata (8.0 kB)\n","Collecting multiprocess>=0.70.17 (from pathos->deeplake<3)\n","  Downloading multiprocess-0.70.17-py311-none-any.whl.metadata (7.2 kB)\n","Requirement already satisfied: python-dateutil<3.0.0,>=2.1 in /usr/local/lib/python3.11/dist-packages (from botocore<1.38.0,>=1.37.26->boto3->deeplake<3) (2.8.2)\n","Requirement already satisfied: urllib3!=2.2.0,<3,>=1.25.4 in /usr/local/lib/python3.11/dist-packages (from botocore<1.38.0,>=1.37.26->boto3->deeplake<3) (2.3.0)\n","Requirement already satisfied: wrapt<2,>=1.10 in /usr/local/lib/python3.11/dist-packages (from deprecated->numcodecs->deeplake<3) (1.17.2)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->humbug>=0.2.6->deeplake<3) (3.4.1)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests->humbug>=0.2.6->deeplake<3) (3.10)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests->humbug>=0.2.6->deeplake<3) (2025.1.31)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil<3.0.0,>=2.1->botocore<1.38.0,>=1.37.26->boto3->deeplake<3) (1.17.0)\n","Downloading deeplake-2.8.7-py3-none-any.whl (439 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m439.8/439.8 kB\u001b[0m \u001b[31m14.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading hub-3.0.1-py3-none-any.whl (1.4 kB)\n","Downloading humbug-0.3.2-py3-none-any.whl (15 kB)\n","Downloading boto3-1.37.26-py3-none-any.whl (139 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m139.6/139.6 kB\u001b[0m \u001b[31m13.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading numcodecs-0.15.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (8.9 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m8.9/8.9 MB\u001b[0m \u001b[31m103.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading pathos-0.3.3-py3-none-any.whl (82 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m82.1/82.1 kB\u001b[0m \u001b[31m8.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading botocore-1.37.26-py3-none-any.whl (13.5 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.5/13.5 MB\u001b[0m \u001b[31m112.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading dill-0.3.9-py3-none-any.whl (119 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m119.4/119.4 kB\u001b[0m \u001b[31m10.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading jmespath-1.0.1-py3-none-any.whl (20 kB)\n","Downloading multiprocess-0.70.17-py311-none-any.whl (144 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m144.3/144.3 kB\u001b[0m \u001b[31m13.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading pox-0.3.5-py3-none-any.whl (29 kB)\n","Downloading ppft-1.7.6.9-py3-none-any.whl (56 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m56.8/56.8 kB\u001b[0m \u001b[31m5.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading s3transfer-0.11.4-py3-none-any.whl (84 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m84.4/84.4 kB\u001b[0m \u001b[31m8.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: ppft, pox, jmespath, dill, numcodecs, multiprocess, humbug, botocore, s3transfer, pathos, boto3, hub, deeplake\n","Successfully installed boto3-1.37.26 botocore-1.37.26 deeplake-2.8.7 dill-0.3.9 hub-3.0.1 humbug-0.3.2 jmespath-1.0.1 multiprocess-0.70.17 numcodecs-0.15.1 pathos-0.3.3 pox-0.3.5 ppft-1.7.6.9 s3transfer-0.11.4\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rTlpfmce6aow","executionInfo":{"status":"ok","timestamp":1743699219630,"user_tz":240,"elapsed":1537,"user":{"displayName":"Aps360","userId":"06588097815320185479"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"9d9a0436-5a4e-4337-c7a8-72d0a4091893"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/deeplake/util/check_latest_version.py:32: UserWarning: A newer version of deeplake (4.1.17) is available. It's recommended that you update to the latest version using `pip install -U deeplake`.\n","  warnings.warn(\n"]}],"source":["import torchvision.transforms as transforms\n","\n","import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","from torch.utils.data import DataLoader, random_split\n","import torch.optim as optim\n","import torchvision.models\n","from torchvision.transforms import Resize\n","\n","from sklearn.metrics import classification_report\n","\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import os\n","import math\n","import deeplake"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.flush_and_unmount()\n","\n","# Remount the drive\n","drive.mount('/content/gdrive', force_remount=True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tNu2MD2f8nn1","executionInfo":{"status":"ok","timestamp":1743699242774,"user_tz":240,"elapsed":17204,"user":{"displayName":"Aps360","userId":"06588097815320185479"}},"outputId":"0d43d76d-f7bd-42e6-d059-4e58f7a6dd17"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive not mounted, so nothing to flush and unmount.\n","Mounted at /content/gdrive\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"JgtIEt_e7EAp"},"outputs":[],"source":["## import data using deeplake and filter images with <4 colours ##\n","from imblearn.over_sampling import SMOTE\n","from torch.utils.data import DataLoader, TensorDataset, random_split\n","\n","def load_fer2013_data_deeplake(batch_size=64, sample_fraction=0.5):\n","  \"\"\"\n","  Load the FER2013 dataset using Deeplake and create proper PyTorch data loaders.\n","\n","  Args:\n","      batch_size (int): Batch size for the data loaders\n","      sample_fraction (float): Fraction of the dataset to load (e.g., 0.5 loads 50%)\n","\n","  Returns:\n","      tuple: (train_loader, val_loader, test_loader)\n","  \"\"\"\n","  print(\"Loading FER2013 dataset from Deeplake...\")\n","\n","  # Define transformations\n","  transform = transforms.Compose([\n","    transforms.ToPILImage(),\n","    transforms.Grayscale(num_output_channels=1),  # Ensure grayscale\n","    transforms.Resize((224, 224)),  # Ensure correct size\n","    transforms.RandomHorizontalFlip(),\n","    transforms.RandomRotation(10),\n","    transforms.ToTensor(),\n","    transforms.Normalize(mean=[0.5], std=[0.5])  # Normalize grayscale images\n","  ])\n","\n","  # Load datasets\n","  train_data = deeplake.load(\"hub://activeloop/fer2013-train\")\n","  val_data = deeplake.load(\"hub://activeloop/fer2013-public-test\")\n","  test_data = deeplake.load(\"hub://activeloop/fer2013-private-test\")\n","\n","  # Extract images and labels from a portion of dataset\n","  # Note: Done to reduce the long test time due to large sample size.\n","  def extract_clean_data(dataset, fraction):\n","    num_samples = int(len(dataset) * fraction)\n","    images, labels = [], []\n","\n","    # Only extract the desired portion of the dataset\n","    for i, sample in enumerate(dataset):\n","        if i >= num_samples:\n","            break\n","        if i % 750 == 0:\n","            print(f\"Extracting sample {i}\")\n","        image, label = transform_images(sample)\n","\n","        # Skip imaages with fewer than four colours\n","        if has_few_colours(image):\n","          print(f\"Skipping image {i} with fewer than four colors\")\n","          continue\n","\n","        images.append(image.numpy().flatten())\n","        labels.append(label.item())\n","\n","    images = np.array(images)\n","    labels = np.array(labels)\n","\n","    # Clean data using clean_data fn\n","    images_resampled, labels_resampled = clean_data(images, labels)\n","\n","    return images_resampled, labels_resampled\n","\n","  # Create PyTorch data loaders with transform function\n","  def transform_images(sample):\n","    # Handle the image tensor - check if it's already a numpy array\n","    if hasattr(sample['images'], 'numpy'):\n","      image = sample['images'].numpy()\n","    else:\n","      image = sample['images']\n","\n","    # Apply transformations\n","    image = transform(image)\n","\n","    # Handle the label tensor\n","    if hasattr(sample['labels'], 'numpy'):\n","      label = sample['labels'].numpy().flatten()[0]\n","    else:\n","      label = sample['labels'].flatten()[0]\n","\n","    # Convert to torch tensor (don't convert to int first)\n","    label = torch.tensor(label, dtype=torch.long)\n","\n","    return image, label\n","\n","  # Check if an image has fewer than four unique colors, as then it is likely a misleading image\n","  def has_few_colours(image):\n","    # Convert the image to a numpy array and flatten it\n","    image_array = image.numpy().flatten()\n","\n","    # Get unique color values\n","    unique_colors = np.unique(image_array)\n","\n","    # Check if the number of unique colors is less than four\n","    if len(unique_colors) < 4:\n","      return True\n","    else:\n","      return False\n","\n","  def clean_data(images, labels):\n","    # Remove low-quality images and balances classes using SMOTE\n","    smote = SMOTE()\n","    images_resampled, labels_resampled = smote.fit_resample(images, labels)\n","    images_resampled = images_resampled.reshape(-1, 1, 224, 224)\n","\n","    images_resampled = torch.tensor(images_resampled, dtype=torch.float32)\n","    labels_resampled = torch.tensor(labels_resampled, dtype=torch.long)\n","\n","    return images_resampled, labels_resampled\n","\n","  # Extract and clean data\n","  train_images, train_labels = extract_clean_data(train_data, sample_fraction)\n","  val_images, val_labels = extract_clean_data(val_data, sample_fraction)\n","  test_images, test_labels = extract_clean_data(test_data, sample_fraction)\n","\n","  print(f\"Finished loading \" + str(sample_fraction*100) + \"% of FER2013 dataset from Deeplake.\")\n","\n","  # Create TensorDatasets and DataLoaders\n","  train_dataset = TensorDataset(train_images, train_labels)\n","  val_dataset = TensorDataset(val_images, val_labels)\n","  test_dataset = TensorDataset(test_images, test_labels)\n","\n","  train_loader = DataLoader(train_dataset,\n","      batch_size=batch_size,\n","      shuffle=True,\n","      num_workers=2\n","  )\n","\n","  val_loader = DataLoader(val_dataset,\n","      batch_size=batch_size,\n","      shuffle=False,\n","      num_workers=2\n","  )\n","\n","  test_loader = DataLoader(test_dataset,\n","      batch_size=batch_size,\n","      shuffle=False,\n","      num_workers=2\n","  )\n","\n","  print(f\"Dataset loaded: {len(train_dataset)} training, {len(val_dataset)} validation, {len(test_dataset)} test samples\")\n","\n","  return train_loader, val_loader, test_loader, train_dataset, val_dataset, test_dataset"]},{"cell_type":"code","source":["## import data from drive ##\n","\n","from imblearn.over_sampling import SMOTE\n","from torch.utils.data import DataLoader, TensorDataset, random_split\n","\n","def load_fer2013_data_drive(batch_size=64, sample_fraction=1):\n","  \"\"\"\n","  Load the FER2013 dataset from Google Drive.\n","\n","  Args:\n","      batch_size (int): Batch size for the data loaders\n","      sample_fraction (float): Fraction of the dataset to load (e.g., 0.5 loads 50%)\n","\n","  Returns:\n","      tuple: (train_loader, val_loader, test_loader)\n","  \"\"\"\n","  print(\"Loading FER2013 dataset from Google Drive...\")\n","\n","  # Define transformations\n","  transform = transforms.Compose([\n","    #transforms.ToPILImage(),\n","    transforms.Grayscale(num_output_channels=1),  # Ensure grayscale\n","    transforms.Resize((48, 48)),  # Ensure correct size\n","    transforms.RandomHorizontalFlip(),\n","    transforms.RandomRotation(10),\n","    transforms.ToTensor(),\n","    transforms.Normalize(mean=[0.5], std=[0.5])  # Normalize grayscale images\n","  ])\n","\n","  # Load datasets\n","  data_path = \"/content/gdrive/MyDrive/Project Dataset\"\n","  train_data = torchvision.datasets.ImageFolder(data_path + '/training', transform=transform)\n","  val_data = torchvision.datasets.ImageFolder(data_path + '/validation', transform=transform)\n","  test_data = torchvision.datasets.ImageFolder(data_path + '/testing', transform=transform)\n","\n","  # Extract images and labels from a portion of dataset\n","  # Note: Done to reduce the long test time due to large sample size.\n","  def extract_clean_data(dataset, fraction):\n","    num_samples = int(len(dataset) * fraction)\n","    images, labels = [], []\n","\n","    # Only extract the desired portion of the dataset\n","    for i, sample in enumerate(dataset):\n","        if i >= num_samples:\n","            break\n","        if i % 500 == 0:\n","            print(f\"Extracting sample {i}\")\n","        image, label = transform_images(sample)\n","        images.append(image.numpy().flatten())\n","        labels.append(label.item())\n","\n","    images = np.array(images)\n","    labels = np.array(labels)\n","\n","    # Clean data using clean_data fn\n","    images_resampled, labels_resampled = clean_data(images, labels)\n","\n","    return images_resampled, labels_resampled\n","\n","  def clean_data(images, labels):\n","    # Remove low-quality images and balances classes using SMOTE\n","    smote = SMOTE()\n","    images_resampled, labels_resampled = smote.fit_resample(images, labels)\n","    images_resampled = images_resampled.reshape(-1, 1, 224, 224)\n","\n","    images_resampled = torch.tensor(images_resampled, dtype=torch.float32)\n","    labels_resampled = torch.tensor(labels_resampled, dtype=torch.long)\n","\n","    return images_resampled, labels_resampled\n","\n","  # Create PyTorch data loaders with transform function\n","  def transform_images(sample):\n","    image, label = sample  # Unpack the tuple\n","    # Check if the image is a tensor, if yes, skip transformation\n","    if isinstance(image, torch.Tensor):\n","        transformed_image = image\n","    else:\n","        transformed_image = transform(image)\n","    label = torch.tensor(label, dtype=torch.long)\n","    return transformed_image, label\n","\n","  # Extract and clean data\n","  train_images, train_labels = extract_clean_data(train_data, sample_fraction)\n","  val_images, val_labels = extract_clean_data(val_data, sample_fraction)\n","  test_images, test_labels = extract_clean_data(test_data, sample_fraction)\n","\n","  print(f\"Finished loading \" + str(sample_fraction*100) + \"% of FER2013 dataset from Google Drive.\")\n","\n","  # Create TensorDatasets and DataLoaders\n","  train_dataset = TensorDataset(train_images, train_labels)\n","  val_dataset = TensorDataset(val_images, val_labels)\n","  test_dataset = TensorDataset(test_images, test_labels)\n","\n","  train_loader = DataLoader(train_dataset,\n","      batch_size=batch_size,\n","      shuffle=True,\n","      num_workers=2\n","  )\n","\n","  val_loader = DataLoader(val_dataset,\n","      batch_size=batch_size,\n","      shuffle=False,\n","      num_workers=2\n","  )\n","\n","  test_loader = DataLoader(test_dataset,\n","      batch_size=batch_size,\n","      shuffle=False,\n","      num_workers=2\n","  )\n","\n","  print(f\"Dataset loaded: {len(train_dataset)} training, {len(val_dataset)} validation, {len(test_dataset)} test samples\")\n","\n","  return train_loader, val_loader, test_loader, train_dataset, val_dataset, test_dataset"],"metadata":{"id":"xVoKQkYfo6oC"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#run until here\n","train_loader, val_loader, test_loader, train_dataset, val_dataset, test_dataset = load_fer2013_data_deeplake()"],"metadata":{"id":"q40dMwsvb2n8","colab":{"base_uri":"https://localhost:8080/"},"outputId":"331af5f1-3636-4b37-fa3b-b271a7bb17ad","executionInfo":{"status":"ok","timestamp":1743700542799,"user_tz":240,"elapsed":1063585,"user":{"displayName":"Aps360","userId":"06588097815320185479"}}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Loading FER2013 dataset from Deeplake...\n","hub://activeloop/fer2013-train loaded successfully.\n","This dataset can be visualized in Jupyter Notebook by ds.visualize() or at https://app.activeloop.ai/activeloop/fer2013-train\n","hub://activeloop/fer2013-public-test loaded successfully.\n","This dataset can be visualized in Jupyter Notebook by ds.visualize() or at https://app.activeloop.ai/activeloop/fer2013-public-test\n","hub://activeloop/fer2013-private-test loaded successfully.\n","This dataset can be visualized in Jupyter Notebook by ds.visualize() or at https://app.activeloop.ai/activeloop/fer2013-private-test\n","Extracting sample 0\n","Extracting sample 750\n","Extracting sample 1500\n","Extracting sample 2250\n","Extracting sample 3000\n","Extracting sample 3750\n","Extracting sample 4500\n","Extracting sample 5250\n","Extracting sample 6000\n","Skipping image 6458 with fewer than four colors\n","Extracting sample 6750\n","Extracting sample 7500\n","Skipping image 7629 with fewer than four colors\n","Extracting sample 8250\n","Extracting sample 9000\n","Extracting sample 9750\n","Skipping image 10423 with fewer than four colors\n","Extracting sample 10500\n","Extracting sample 11250\n","Skipping image 11286 with fewer than four colors\n","Extracting sample 12000\n","Extracting sample 12750\n","Skipping image 13148 with fewer than four colors\n","Skipping image 13402 with fewer than four colors\n","Extracting sample 13500\n","Skipping image 13988 with fewer than four colors\n","Extracting sample 14250\n","Extracting sample 0\n","Extracting sample 750\n","Skipping image 1293 with fewer than four colors\n","Extracting sample 1500\n","Extracting sample 0\n","Extracting sample 750\n","Extracting sample 1500\n","Finished loading 50.0% of FER2013 dataset from Deeplake.\n","Dataset loaded: 24948 training, 2996 validation, 3094 test samples\n"]}]},{"cell_type":"code","source":["alexnet = torchvision.models.alexnet(pretrained = True)\n","alexnet.features = nn.Sequential(\n","  nn.Conv2d(1, 64, kernel_size=11, stride=4, padding=2),\n","  nn.ReLU(inplace=True),\n","  nn.MaxPool2d(kernel_size=3, stride=2),\n","  nn.Conv2d(64, 192, kernel_size=5, padding=2),\n","  nn.ReLU(inplace=True),\n","  nn.MaxPool2d(kernel_size=3, stride=2),\n","  nn.Conv2d(192, 384, kernel_size=3, padding=1),\n","  nn.ReLU(inplace=True),\n","  nn.Conv2d(384, 256, kernel_size=3, padding=1),\n","  nn.ReLU(inplace=True),\n","  nn.Conv2d(256, 256, kernel_size=3, padding=1),\n","  nn.ReLU(inplace=True),\n","  nn.MaxPool2d(kernel_size=3, stride=2),\n",")\n","alexnet.requires_grad = False"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PM50r-9-7Ymv","executionInfo":{"status":"ok","timestamp":1743700599084,"user_tz":240,"elapsed":1865,"user":{"displayName":"Aps360","userId":"06588097815320185479"}},"outputId":"0866e3f2-69c6-4829-f667-c47912878474"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=AlexNet_Weights.IMAGENET1K_V1`. You can also use `weights=AlexNet_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n","Downloading: \"https://download.pytorch.org/models/alexnet-owt-7be5be79.pth\" to /root/.cache/torch/hub/checkpoints/alexnet-owt-7be5be79.pth\n","100%|██████████| 233M/233M [00:01<00:00, 213MB/s]\n"]}]},{"cell_type":"code","source":["class TransferLearningClassifier(nn.Module):\n","  def __init__(self):\n","    super(TransferLearningClassifier, self).__init__()\n","    self.embedding_model = alexnet.features\n","    # self.fc1 = nn.Linear(9216, 512)\n","    # self.dropout = nn.Dropout(0.5)\n","    # self.fc2 = nn.Linear(512, 7)\n","    self.nn = nn.Sequential(\n","      nn.Linear(9216, 512),\n","      nn.ReLU(),\n","      nn.Dropout(0.25),\n","      nn.Linear(512, 256),\n","      nn.ReLU(),\n","      nn.Dropout(0.25),\n","      nn.Linear(256, 128),\n","      nn.ReLU(),\n","      nn.Dropout(0.25),\n","      nn.Linear(128, 7)\n","    )\n","  def forward(self, x):\n","    x = self.embedding_model(x)\n","    x = torch.flatten(x, 1, 3)\n","    return self.nn(x)"],"metadata":{"id":"CxMiT-NHECb0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#training code\n","def train_net(net, train_loader, val_loader, batch_size, n_epochs,\n","              learning_rate, device = \"cuda\" if torch.cuda.is_available() else \"cpu\"):\n","  torch.manual_seed(1000)\n","\n","  net = net.to(device)\n","  optimizer = optim.Adam(net.parameters(), lr = learning_rate, weight_decay = 1e-4)\n","  criterion = nn.CrossEntropyLoss()\n","\n","  #For storing metrics\n","  train_err = np.zeros(n_epochs)\n","  train_loss = np.zeros(n_epochs)\n","  train_acc = np.zeros(n_epochs)\n","  val_err = np.zeros(n_epochs)\n","  val_loss = np.zeros(n_epochs)\n","  val_acc = np.zeros(n_epochs)\n","\n","  for epoch in range(n_epochs):\n","    net.train()\n","    train_running_loss = 0.0\n","    train_running_error = 0.0\n","    train_running_corrects = 0\n","    train_total = 0\n","\n","    for imgs, labels in train_loader:\n","      curr_batch_size = imgs.size(0)\n","      imgs, labels = imgs.to(device), labels.to(device)\n","      outputs = net(imgs)\n","      loss = criterion(outputs, labels)\n","\n","      optimizer.zero_grad()\n","      loss.backward()\n","      optimizer.step()\n","\n","      _, preds = torch.max(outputs, 1)\n","      train_running_error += (preds != labels).sum().item()\n","      train_running_loss += loss.item() * imgs.size(0)\n","      train_running_corrects += torch.sum(preds == labels.data).item()\n","      train_total += labels.size(0)\n","\n","    train_err[epoch] = train_running_error / train_total\n","    train_loss[epoch] = train_running_loss / train_total\n","    train_acc[epoch] = train_running_corrects / train_total\n","\n","    print(f'Epoch [{epoch+1}/{n_epochs}] Train error: {train_err[epoch]:.4f} Train loss: {train_loss[epoch]:.4f} Train accuracy: {train_acc[epoch]:.4f}')\n","\n","    # Validation phase\n","    net.eval()\n","    val_running_loss = 0.0\n","    val_running_error = 0.0\n","    val_running_corrects = 0\n","    val_total = 0\n","\n","    with torch.no_grad():  # Disable gradient calculation for validation\n","      for imgs, labels in val_loader:\n","        imgs, labels = imgs.to(device), labels.to(device)\n","\n","        outputs = net(imgs)\n","        loss = criterion(outputs, labels)\n","\n","        _, preds = torch.max(outputs, 1)\n","        val_running_error += (preds != labels).sum().item()\n","        val_running_loss += loss.item() * imgs.size(0)\n","        val_running_corrects += torch.sum(preds == labels.data).item()\n","        val_total += labels.size(0)\n","\n","    val_err[epoch] = val_running_error / val_total\n","    val_loss[epoch] = val_running_loss / val_total\n","    val_acc[epoch] = val_running_corrects / val_total\n","\n","    print(f'Epoch [{epoch+1}/{n_epochs}] Val error: {val_err[epoch]:.4f} Val loss: {val_loss[epoch]:.4f} Val accuracy: {val_acc[epoch]:.4f}')\n","\n","  print(\"Finished Training\")\n","\n","  return {\n","    'train_err': train_err,\n","    'train_loss': train_loss,\n","    'train_acc': train_acc,\n","    'val_err': val_err,\n","    'val_loss': val_loss,\n","    'val_acc': val_acc\n","  }"],"metadata":{"id":"8_u0jN6MwXU2"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"h7j4EHGedJeZ"},"outputs":[],"source":["def plot_metrics(metrics):\n","    \"\"\"\n","    Plot training and validation metrics over epochs.\n","\n","    Args:\n","        metrics (dict): Dictionary containing training and validation metrics over epochs.\n","    \"\"\"\n","    epochs = range(1, len(metrics['train_loss']) + 1)\n","\n","    plt.figure(figsize=(15, 10))\n","\n","    # Plot loss\n","    plt.subplot(2, 2, 1)\n","    plt.plot(epochs, metrics['train_loss'], 'b-', label='Training Loss')\n","    plt.plot(epochs, metrics['val_loss'], 'r-', label='Validation Loss')\n","    plt.title('Training and Validation Loss')\n","    plt.xlabel('Epochs')\n","    plt.ylabel('Loss')\n","    plt.legend()\n","\n","    # Plot error\n","    plt.subplot(2, 2, 2)\n","    plt.plot(epochs, metrics['train_err'], 'b-', label='Training Error')\n","    plt.plot(epochs, metrics['val_err'], 'r-', label='Validation Error')\n","    plt.title('Training and Validation Error')\n","    plt.xlabel('Epochs')\n","    plt.ylabel('Error Rate')\n","    plt.legend()\n","\n","    # Plot accuracy\n","    plt.subplot(2, 2, 3)\n","    plt.plot(epochs, metrics['train_acc'], 'b-', label='Training Accuracy')\n","    plt.plot(epochs, metrics['val_acc'], 'r-', label='Validation Accuracy')\n","    plt.title('Training and Validation Accuracy')\n","    plt.xlabel('Epochs')\n","    plt.ylabel('Accuracy')\n","    plt.legend()\n","\n","    # Add a combined plot\n","    plt.subplot(2, 2, 4)\n","    plt.plot(epochs, metrics['train_loss'], 'b-', label='Train Loss')\n","    plt.plot(epochs, metrics['val_loss'], 'r-', label='Val Loss')\n","    plt.plot(epochs, metrics['train_acc'], 'g-', label='Train Acc')\n","    plt.plot(epochs, metrics['val_acc'], 'y-', label='Val Acc')\n","    plt.title('Combined Metrics')\n","    plt.xlabel('Epochs')\n","    plt.ylabel('Value')\n","    plt.legend()\n","\n","    plt.tight_layout()\n","    plt.show()\n"]},{"cell_type":"code","source":["transfer_learning_model = TransferLearningClassifier()"],"metadata":{"id":"9tRC1SxeeL35"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["metrics = train_net(transfer_learning_model, train_loader, val_loader, batch_size = 64, n_epochs = 30, learning_rate = 1e-4)"],"metadata":{"id":"pexGMEapd1HZ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1743700974484,"user_tz":240,"elapsed":329033,"user":{"displayName":"Aps360","userId":"06588097815320185479"}},"outputId":"04a18694-4b13-4128-e0e9-70f9b06f59a7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch [1/30] Train error: 0.7883 Train loss: 1.8900 Train accuracy: 0.2117\n","Epoch [1/30] Val error: 0.6919 Val loss: 1.7764 Val accuracy: 0.3081\n","Epoch [2/30] Train error: 0.6681 Train loss: 1.6957 Train accuracy: 0.3319\n","Epoch [2/30] Val error: 0.6185 Val loss: 1.5966 Val accuracy: 0.3815\n","Epoch [3/30] Train error: 0.5646 Train loss: 1.4713 Train accuracy: 0.4354\n","Epoch [3/30] Val error: 0.5648 Val loss: 1.4926 Val accuracy: 0.4352\n","Epoch [4/30] Train error: 0.5054 Train loss: 1.3141 Train accuracy: 0.4946\n","Epoch [4/30] Val error: 0.5414 Val loss: 1.4535 Val accuracy: 0.4586\n","Epoch [5/30] Train error: 0.4692 Train loss: 1.2106 Train accuracy: 0.5308\n","Epoch [5/30] Val error: 0.5374 Val loss: 1.4975 Val accuracy: 0.4626\n","Epoch [6/30] Train error: 0.4367 Train loss: 1.1278 Train accuracy: 0.5633\n","Epoch [6/30] Val error: 0.5227 Val loss: 1.5141 Val accuracy: 0.4773\n","Epoch [7/30] Train error: 0.4046 Train loss: 1.0528 Train accuracy: 0.5954\n","Epoch [7/30] Val error: 0.5050 Val loss: 1.5204 Val accuracy: 0.4950\n","Epoch [8/30] Train error: 0.3788 Train loss: 0.9854 Train accuracy: 0.6212\n","Epoch [8/30] Val error: 0.5033 Val loss: 1.5177 Val accuracy: 0.4967\n","Epoch [9/30] Train error: 0.3496 Train loss: 0.9251 Train accuracy: 0.6504\n","Epoch [9/30] Val error: 0.5257 Val loss: 1.7789 Val accuracy: 0.4743\n","Epoch [10/30] Train error: 0.3242 Train loss: 0.8586 Train accuracy: 0.6758\n","Epoch [10/30] Val error: 0.5103 Val loss: 1.7743 Val accuracy: 0.4897\n","Epoch [11/30] Train error: 0.2952 Train loss: 0.7932 Train accuracy: 0.7048\n","Epoch [11/30] Val error: 0.5047 Val loss: 1.5827 Val accuracy: 0.4953\n","Epoch [12/30] Train error: 0.2598 Train loss: 0.7083 Train accuracy: 0.7402\n","Epoch [12/30] Val error: 0.5097 Val loss: 1.8201 Val accuracy: 0.4903\n","Epoch [13/30] Train error: 0.2292 Train loss: 0.6323 Train accuracy: 0.7708\n","Epoch [13/30] Val error: 0.4950 Val loss: 1.8591 Val accuracy: 0.5050\n","Epoch [14/30] Train error: 0.1967 Train loss: 0.5512 Train accuracy: 0.8033\n","Epoch [14/30] Val error: 0.5190 Val loss: 1.8604 Val accuracy: 0.4810\n","Epoch [15/30] Train error: 0.1665 Train loss: 0.4728 Train accuracy: 0.8335\n","Epoch [15/30] Val error: 0.5154 Val loss: 2.1566 Val accuracy: 0.4846\n","Epoch [16/30] Train error: 0.1412 Train loss: 0.4034 Train accuracy: 0.8588\n","Epoch [16/30] Val error: 0.5093 Val loss: 2.2753 Val accuracy: 0.4907\n","Epoch [17/30] Train error: 0.1204 Train loss: 0.3462 Train accuracy: 0.8796\n","Epoch [17/30] Val error: 0.5100 Val loss: 2.4082 Val accuracy: 0.4900\n","Epoch [18/30] Train error: 0.1029 Train loss: 0.2968 Train accuracy: 0.8971\n","Epoch [18/30] Val error: 0.5033 Val loss: 2.3839 Val accuracy: 0.4967\n","Epoch [19/30] Train error: 0.0857 Train loss: 0.2440 Train accuracy: 0.9143\n","Epoch [19/30] Val error: 0.5180 Val loss: 2.8015 Val accuracy: 0.4820\n","Epoch [20/30] Train error: 0.0751 Train loss: 0.2121 Train accuracy: 0.9249\n","Epoch [20/30] Val error: 0.5214 Val loss: 2.4727 Val accuracy: 0.4786\n","Epoch [21/30] Train error: 0.0624 Train loss: 0.1805 Train accuracy: 0.9376\n","Epoch [21/30] Val error: 0.5073 Val loss: 2.9847 Val accuracy: 0.4927\n","Epoch [22/30] Train error: 0.0571 Train loss: 0.1653 Train accuracy: 0.9429\n","Epoch [22/30] Val error: 0.5250 Val loss: 2.8136 Val accuracy: 0.4750\n","Epoch [23/30] Train error: 0.0499 Train loss: 0.1457 Train accuracy: 0.9501\n","Epoch [23/30] Val error: 0.5190 Val loss: 3.0615 Val accuracy: 0.4810\n","Epoch [24/30] Train error: 0.0451 Train loss: 0.1329 Train accuracy: 0.9549\n","Epoch [24/30] Val error: 0.5097 Val loss: 2.9817 Val accuracy: 0.4903\n","Epoch [25/30] Train error: 0.0415 Train loss: 0.1208 Train accuracy: 0.9585\n","Epoch [25/30] Val error: 0.5117 Val loss: 3.0423 Val accuracy: 0.4883\n","Epoch [26/30] Train error: 0.0378 Train loss: 0.1164 Train accuracy: 0.9622\n","Epoch [26/30] Val error: 0.5130 Val loss: 2.8687 Val accuracy: 0.4870\n","Epoch [27/30] Train error: 0.0355 Train loss: 0.1041 Train accuracy: 0.9645\n","Epoch [27/30] Val error: 0.5187 Val loss: 2.9564 Val accuracy: 0.4813\n","Epoch [28/30] Train error: 0.0335 Train loss: 0.0978 Train accuracy: 0.9665\n","Epoch [28/30] Val error: 0.5210 Val loss: 3.0153 Val accuracy: 0.4790\n","Epoch [29/30] Train error: 0.0307 Train loss: 0.0931 Train accuracy: 0.9693\n","Epoch [29/30] Val error: 0.5230 Val loss: 3.3220 Val accuracy: 0.4770\n","Epoch [30/30] Train error: 0.0296 Train loss: 0.0875 Train accuracy: 0.9704\n","Epoch [30/30] Val error: 0.5117 Val loss: 3.5536 Val accuracy: 0.4883\n","Finished Training\n"]}]},{"cell_type":"code","source":["plot_metrics(metrics)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":957},"id":"LCzic4V3c6Gj","executionInfo":{"status":"ok","timestamp":1743700981236,"user_tz":240,"elapsed":836,"user":{"displayName":"Aps360","userId":"06588097815320185479"}},"outputId":"2dfcdb84-46da-4066-a7af-2398c18dff99"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1500x1000 with 4 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["#device = \"cuda\"\n","device = \"cpu\""],"metadata":{"id":"G-YRSMnqOZAK"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["test_dataset[:3]"],"metadata":{"id":"GqujiPw2m6Hz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1743703540821,"user_tz":240,"elapsed":5,"user":{"displayName":"Aps360","userId":"06588097815320185479"}},"outputId":"c7b92a13-6a01-446a-9c70-33d4b8fcb67c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(tensor([[[[-1.0000, -1.0000, -1.0000,  ..., -1.0000, -1.0000, -1.0000],\n","           [-1.0000, -1.0000, -1.0000,  ..., -1.0000, -1.0000, -1.0000],\n","           [-1.0000, -1.0000, -1.0000,  ..., -1.0000, -1.0000, -1.0000],\n","           ...,\n","           [-1.0000, -1.0000, -1.0000,  ..., -1.0000, -1.0000, -1.0000],\n","           [-1.0000, -1.0000, -1.0000,  ..., -1.0000, -1.0000, -1.0000],\n","           [-1.0000, -1.0000, -1.0000,  ..., -1.0000, -1.0000, -1.0000]]],\n"," \n"," \n","         [[[-1.0000, -1.0000, -0.8824,  ..., -1.0000, -1.0000, -1.0000],\n","           [-1.0000, -1.0000, -0.8745,  ..., -1.0000, -1.0000, -1.0000],\n","           [-1.0000, -1.0000, -0.8667,  ..., -0.9529, -0.9451, -0.9451],\n","           ...,\n","           [-0.5922, -0.5843, -0.5765,  ..., -0.8510, -1.0000, -1.0000],\n","           [-1.0000, -1.0000, -1.0000,  ..., -0.8588, -1.0000, -1.0000],\n","           [-1.0000, -1.0000, -1.0000,  ..., -0.8667, -1.0000, -1.0000]]],\n"," \n"," \n","         [[[-1.0000, -1.0000, -1.0000,  ..., -1.0000, -1.0000, -1.0000],\n","           [-1.0000, -1.0000, -1.0000,  ..., -1.0000, -1.0000, -1.0000],\n","           [-1.0000, -1.0000, -1.0000,  ..., -1.0000, -1.0000, -1.0000],\n","           ...,\n","           [-1.0000, -1.0000, -1.0000,  ..., -1.0000, -1.0000, -1.0000],\n","           [-1.0000, -1.0000, -1.0000,  ..., -1.0000, -1.0000, -1.0000],\n","           [-1.0000, -1.0000, -1.0000,  ..., -1.0000, -1.0000, -1.0000]]]]),\n"," tensor([0, 5, 6]))"]},"metadata":{},"execution_count":26}]},{"cell_type":"code","source":["#create F1-score table\n","with torch.no_grad():\n","  test_imgs, test_labels = test_dataset.tensors\n","  transfer_learning_model = transfer_learning_model.to(device)\n","  test_imgs, test_labels = test_imgs.to(device), test_labels.to(device)\n","  test_predictions = transfer_learning_model(test_imgs)\n","\n","# Convert predictions to class labels using argmax\n","test_predictions = torch.argmax(test_predictions, dim=1).cpu().numpy() # Convert predictions to class labels\n","test_labels = test_labels.cpu().numpy()\n","# test_imgs = test_imgs.detach().numpy() # No need to detach if already on CPU"],"metadata":{"id":"mFs8gGv1MxYa"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(classification_report(test_labels, test_predictions))"],"metadata":{"id":"PyU7gqbIrVRH","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1743705301389,"user_tz":240,"elapsed":6,"user":{"displayName":"Aps360","userId":"06588097815320185479"}},"outputId":"9cd85828-e450-4ccc-b792-207cf2a53341"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       0.36      0.36      0.36       442\n","           1       0.80      0.36      0.49       442\n","           2       0.29      0.33      0.31       442\n","           3       0.63      0.74      0.68       442\n","           4       0.32      0.37      0.34       442\n","           5       0.80      0.60      0.69       442\n","           6       0.40      0.52      0.45       442\n","\n","    accuracy                           0.47      3094\n","   macro avg       0.51      0.47      0.48      3094\n","weighted avg       0.51      0.47      0.48      3094\n","\n"]}]}]}