{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":31563,"status":"ok","timestamp":1743600809005,"user":{"displayName":"Adam Stechishin","userId":"05403370840446889218"},"user_tz":240},"id":"s6j8nl1VgLUb","outputId":"dd3de7a6-4473-4d86-ecb6-d49d7d9a6bdd"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting deeplake<3\n","  Downloading deeplake-2.8.7-py3-none-any.whl.metadata (21 kB)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from deeplake<3) (2.0.2)\n","Requirement already satisfied: pillow in /usr/local/lib/python3.11/dist-packages (from deeplake<3) (11.1.0)\n","Collecting boto3 (from deeplake<3)\n","  Downloading boto3-1.37.25-py3-none-any.whl.metadata (6.7 kB)\n","Requirement already satisfied: click in /usr/local/lib/python3.11/dist-packages (from deeplake<3) (8.1.8)\n","Collecting pathos (from deeplake<3)\n","  Downloading pathos-0.3.3-py3-none-any.whl.metadata (11 kB)\n","Collecting humbug>=0.2.6 (from deeplake<3)\n","  Downloading humbug-0.3.2-py3-none-any.whl.metadata (6.8 kB)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (from deeplake<3) (4.67.1)\n","Collecting numcodecs (from deeplake<3)\n","  Downloading numcodecs-0.15.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.9 kB)\n","Requirement already satisfied: pyjwt in /usr/local/lib/python3.11/dist-packages (from deeplake<3) (2.10.1)\n","Collecting hub>=2.8.7 (from deeplake<3)\n","  Downloading hub-3.0.1-py3-none-any.whl.metadata (389 bytes)\n","Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from humbug>=0.2.6->deeplake<3) (2.32.3)\n","Collecting botocore<1.38.0,>=1.37.25 (from boto3->deeplake<3)\n","  Downloading botocore-1.37.25-py3-none-any.whl.metadata (5.7 kB)\n","Collecting jmespath<2.0.0,>=0.7.1 (from boto3->deeplake<3)\n","  Downloading jmespath-1.0.1-py3-none-any.whl.metadata (7.6 kB)\n","Collecting s3transfer<0.12.0,>=0.11.0 (from boto3->deeplake<3)\n","  Downloading s3transfer-0.11.4-py3-none-any.whl.metadata (1.7 kB)\n","Requirement already satisfied: deprecated in /usr/local/lib/python3.11/dist-packages (from numcodecs->deeplake<3) (1.2.18)\n","Collecting ppft>=1.7.6.9 (from pathos->deeplake<3)\n","  Downloading ppft-1.7.6.9-py3-none-any.whl.metadata (12 kB)\n","Collecting dill>=0.3.9 (from pathos->deeplake<3)\n","  Downloading dill-0.3.9-py3-none-any.whl.metadata (10 kB)\n","Collecting pox>=0.3.5 (from pathos->deeplake<3)\n","  Downloading pox-0.3.5-py3-none-any.whl.metadata (8.0 kB)\n","Collecting multiprocess>=0.70.17 (from pathos->deeplake<3)\n","  Downloading multiprocess-0.70.17-py311-none-any.whl.metadata (7.2 kB)\n","Requirement already satisfied: python-dateutil<3.0.0,>=2.1 in /usr/local/lib/python3.11/dist-packages (from botocore<1.38.0,>=1.37.25->boto3->deeplake<3) (2.8.2)\n","Requirement already satisfied: urllib3!=2.2.0,<3,>=1.25.4 in /usr/local/lib/python3.11/dist-packages (from botocore<1.38.0,>=1.37.25->boto3->deeplake<3) (2.3.0)\n","Requirement already satisfied: wrapt<2,>=1.10 in /usr/local/lib/python3.11/dist-packages (from deprecated->numcodecs->deeplake<3) (1.17.2)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->humbug>=0.2.6->deeplake<3) (3.4.1)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests->humbug>=0.2.6->deeplake<3) (3.10)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests->humbug>=0.2.6->deeplake<3) (2025.1.31)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil<3.0.0,>=2.1->botocore<1.38.0,>=1.37.25->boto3->deeplake<3) (1.17.0)\n","Downloading deeplake-2.8.7-py3-none-any.whl (439 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m439.8/439.8 kB\u001b[0m \u001b[31m6.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading hub-3.0.1-py3-none-any.whl (1.4 kB)\n","Downloading humbug-0.3.2-py3-none-any.whl (15 kB)\n","Downloading boto3-1.37.25-py3-none-any.whl (139 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m139.6/139.6 kB\u001b[0m \u001b[31m8.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading numcodecs-0.15.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (8.9 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m8.9/8.9 MB\u001b[0m \u001b[31m27.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading pathos-0.3.3-py3-none-any.whl (82 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m82.1/82.1 kB\u001b[0m \u001b[31m4.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading botocore-1.37.25-py3-none-any.whl (13.5 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.5/13.5 MB\u001b[0m \u001b[31m33.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading dill-0.3.9-py3-none-any.whl (119 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m119.4/119.4 kB\u001b[0m \u001b[31m5.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading jmespath-1.0.1-py3-none-any.whl (20 kB)\n","Downloading multiprocess-0.70.17-py311-none-any.whl (144 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m144.3/144.3 kB\u001b[0m \u001b[31m8.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading pox-0.3.5-py3-none-any.whl (29 kB)\n","Downloading ppft-1.7.6.9-py3-none-any.whl (56 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m56.8/56.8 kB\u001b[0m \u001b[31m2.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading s3transfer-0.11.4-py3-none-any.whl (84 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m84.4/84.4 kB\u001b[0m \u001b[31m4.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: ppft, pox, jmespath, dill, numcodecs, multiprocess, humbug, botocore, s3transfer, pathos, boto3, hub, deeplake\n","Successfully installed boto3-1.37.25 botocore-1.37.25 deeplake-2.8.7 dill-0.3.9 hub-3.0.1 humbug-0.3.2 jmespath-1.0.1 multiprocess-0.70.17 numcodecs-0.15.1 pathos-0.3.3 pox-0.3.5 ppft-1.7.6.9 s3transfer-0.11.4\n"]}],"source":["!pip install \"deeplake<3\""]},{"cell_type":"code","execution_count":2,"metadata":{"id":"MlnjPGffY-0J","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1743600833825,"user_tz":240,"elapsed":19053,"user":{"displayName":"Adam Stechishin","userId":"05403370840446889218"}},"outputId":"504122fe-d2d6-46d6-c613-5728119b7ab0"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/deeplake/util/check_latest_version.py:32: UserWarning: A newer version of deeplake (4.1.17) is available. It's recommended that you update to the latest version using `pip install -U deeplake`.\n","  warnings.warn(\n"]}],"source":["from sklearn.ensemble import RandomForestClassifier\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import classification_report\n","\n","import torch\n","import torchvision\n","from torchvision.transforms import transforms\n","\n","import numpy as np\n","import os\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","\n","import deeplake"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"JgtIEt_e7EAp"},"outputs":[],"source":["from imblearn.over_sampling import SMOTE\n","from torch.utils.data import DataLoader, TensorDataset, random_split\n","\n","def load_fer2013_data(sample_fraction=0.5):\n","  \"\"\"\n","  Load the FER2013 dataset using Deeplake and create proper PyTorch data loaders.\n","\n","  Args:\n","      batch_size (int): Batch size for the data loaders\n","      sample_fraction (float): Fraction of the dataset to load (e.g., 0.5 loads 50%)\n","\n","  Returns:\n","      tuple: (train_loader, val_loader, test_loader)\n","  \"\"\"\n","  print(\"Loading FER2013 dataset from Deeplake...\")\n","\n","  # Define transformations\n","  transform = transforms.Compose([\n","    transforms.ToPILImage(),\n","    transforms.Grayscale(num_output_channels=1),  # Ensure grayscale\n","    transforms.Resize((48, 48)),  # Ensure correct size\n","    transforms.RandomHorizontalFlip(),\n","    transforms.RandomRotation(10),\n","    transforms.ToTensor(),\n","    transforms.Normalize(mean=[0.5], std=[0.5])  # Normalize grayscale images\n","  ])\n","\n","  # Load datasets\n","  train_data = deeplake.load(\"hub://activeloop/fer2013-train\")\n","  val_data = deeplake.load(\"hub://activeloop/fer2013-public-test\")\n","  test_data = deeplake.load(\"hub://activeloop/fer2013-private-test\")\n","\n","  # Extract images and labels from a portion of dataset\n","  # Note: Done to reduce the long test time due to large sample size.\n","  def extract_clean_data(dataset, fraction):\n","    num_samples = int(len(dataset) * fraction)\n","    images, labels = [], []\n","\n","    # Only extract the desired portion of the dataset\n","    for i, sample in enumerate(dataset):\n","        if i >= num_samples:\n","            break\n","        if i % 500 == 0:\n","            print(f\"Extracting sample {i}\")\n","        image, label = transform_images(sample)\n","        images.append(image.numpy().flatten())\n","        labels.append(label.item())\n","\n","    images = np.array(images)\n","    labels = np.array(labels)\n","\n","    # Clean data using clean_data fn\n","    images_resampled, labels_resampled = clean_data(images, labels)\n","\n","    return images_resampled, labels_resampled\n","\n","  def clean_data(images, labels):\n","    # Remove low-quality images and balances classes using SMOTE\n","    smote = SMOTE()\n","    images_resampled, labels_resampled = smote.fit_resample(images, labels)\n","    images_resampled = images_resampled.reshape(-1, 1, 48, 48)\n","\n","    images_resampled = torch.tensor(images_resampled, dtype=torch.float32)\n","    labels_resampled = torch.tensor(labels_resampled, dtype=torch.long)\n","\n","    return images_resampled, labels_resampled\n","\n","  # Create PyTorch data loaders with transform function\n","  def transform_images(sample):\n","    # Handle the image tensor - check if it's already a numpy array\n","    if hasattr(sample['images'], 'numpy'):\n","      image = sample['images'].numpy()\n","    else:\n","      image = sample['images']\n","\n","    # Apply transformations\n","    image = transform(image)\n","\n","    # Handle the label tensor\n","    if hasattr(sample['labels'], 'numpy'):\n","      label = sample['labels'].numpy().flatten()[0]\n","    else:\n","      label = sample['labels'].flatten()[0]\n","\n","    # Convert to torch tensor (don't convert to int first)\n","    label = torch.tensor(label, dtype=torch.long)\n","\n","    return image, label\n","\n","  # Extract and clean data\n","  train_images, train_labels = extract_clean_data(train_data, sample_fraction)\n","  val_images, val_labels = extract_clean_data(val_data, sample_fraction)\n","  test_images, test_labels = extract_clean_data(test_data, sample_fraction)\n","\n","  print(f\"Finished loading \" + str(sample_fraction*100) + \"% of FER2013 dataset from Deeplake.\")\n","\n","  # Create TensorDatasets and DataLoaders\n","  train_dataset = TensorDataset(train_images, train_labels)\n","  val_dataset = TensorDataset(val_images, val_labels)\n","  test_dataset = TensorDataset(test_images, test_labels)\n","\n","  print(f\"Dataset loaded: {len(train_data)} training, {len(val_data)} validation, {len(test_data)} test samples\")\n","\n","  return train_dataset, val_dataset, test_dataset"]},{"cell_type":"code","execution_count":8,"metadata":{"id":"tnU5cs2xvOrU","executionInfo":{"status":"ok","timestamp":1743601633739,"user_tz":240,"elapsed":38,"user":{"displayName":"Adam Stechishin","userId":"05403370840446889218"}}},"outputs":[],"source":["## import data using deeplake and filter images with <4 colours ##\n","from imblearn.over_sampling import SMOTE\n","from torch.utils.data import DataLoader, TensorDataset, random_split\n","\n","def load_fer2013_data_deeplake(batch_size=64, sample_fraction=0.5):\n","  \"\"\"\n","  Load the FER2013 dataset using Deeplake and create proper PyTorch data loaders.\n","\n","  Args:\n","      batch_size (int): Batch size for the data loaders\n","      sample_fraction (float): Fraction of the dataset to load (e.g., 0.5 loads 50%)\n","\n","  Returns:\n","      tuple: (train_loader, val_loader, test_loader)\n","  \"\"\"\n","  print(\"Loading FER2013 dataset from Deeplake...\")\n","\n","  # Define transformations\n","  transform = transforms.Compose([\n","    transforms.ToPILImage(),\n","    transforms.Grayscale(num_output_channels=1),  # Ensure grayscale\n","    transforms.Resize((48, 48)),  # Ensure correct size\n","    transforms.RandomHorizontalFlip(),\n","    transforms.RandomRotation(10),\n","    transforms.ToTensor(),\n","    transforms.Normalize(mean=[0.5], std=[0.5])  # Normalize grayscale images\n","  ])\n","\n","  # Load datasets\n","  train_data = deeplake.load(\"hub://activeloop/fer2013-train\")\n","  val_data = deeplake.load(\"hub://activeloop/fer2013-public-test\")\n","  test_data = deeplake.load(\"hub://activeloop/fer2013-private-test\")\n","\n","  # Extract images and labels from a portion of dataset\n","  # Note: Done to reduce the long test time due to large sample size.\n","  def extract_clean_data(dataset, fraction):\n","    num_samples = int(len(dataset) * fraction)\n","    images, labels = [], []\n","\n","    # Only extract the desired portion of the dataset\n","    for i, sample in enumerate(dataset):\n","        if i >= num_samples:\n","            break\n","        if i % 750 == 0:\n","            print(f\"Extracting sample {i}\")\n","        image, label = transform_images(sample)\n","\n","        # Skip imaages with fewer than four colours\n","        if has_few_colours(image):\n","          print(f\"Skipping image {i} with fewer than four colors\")\n","          continue\n","\n","        images.append(image.numpy().flatten())\n","        labels.append(label.item())\n","\n","    images = np.array(images)\n","    labels = np.array(labels)\n","\n","    # Clean data using clean_data fn\n","    images_resampled, labels_resampled = clean_data(images, labels)\n","\n","    return images_resampled, labels_resampled\n","\n","  # Create PyTorch data loaders with transform function\n","  def transform_images(sample):\n","    # Handle the image tensor - check if it's already a numpy array\n","    if hasattr(sample['images'], 'numpy'):\n","      image = sample['images'].numpy()\n","    else:\n","      image = sample['images']\n","\n","    # Apply transformations\n","    image = transform(image)\n","\n","    # Handle the label tensor\n","    if hasattr(sample['labels'], 'numpy'):\n","      label = sample['labels'].numpy().flatten()[0]\n","    else:\n","      label = sample['labels'].flatten()[0]\n","\n","    # Convert to torch tensor (don't convert to int first)\n","    label = torch.tensor(label, dtype=torch.long)\n","\n","    return image, label\n","\n","  # Check if an image has fewer than four unique colors, as then it is likely a misleading image\n","  def has_few_colours(image):\n","    # Convert the image to a numpy array and flatten it\n","    image_array = image.numpy().flatten()\n","\n","    # Get unique color values\n","    unique_colors = np.unique(image_array)\n","\n","    # Check if the number of unique colors is less than four\n","    if len(unique_colors) < 4:\n","      return True\n","    else:\n","      return False\n","\n","  def clean_data(images, labels):\n","    # Remove low-quality images and balances classes using SMOTE\n","    smote = SMOTE()\n","    images_resampled, labels_resampled = smote.fit_resample(images, labels)\n","    images_resampled = images_resampled.reshape(-1, 1, 48, 48)\n","\n","    images_resampled = torch.tensor(images_resampled, dtype=torch.float32)\n","    labels_resampled = torch.tensor(labels_resampled, dtype=torch.long)\n","\n","    return images_resampled, labels_resampled\n","\n","  # Extract and clean data\n","  train_images, train_labels = extract_clean_data(train_data, sample_fraction)\n","  val_images, val_labels = extract_clean_data(val_data, sample_fraction)\n","  test_images, test_labels = extract_clean_data(test_data, sample_fraction)\n","\n","  print(f\"Finished loading \" + str(sample_fraction*100) + \"% of FER2013 dataset from Deeplake.\")\n","\n","  # Create TensorDatasets and DataLoaders\n","  train_dataset = TensorDataset(train_images, train_labels)\n","  val_dataset = TensorDataset(val_images, val_labels)\n","  test_dataset = TensorDataset(test_images, test_labels)\n","\n","  print(f\"Dataset loaded: {len(train_dataset)} training, {len(val_dataset)} validation, {len(test_dataset)} test samples\")\n","\n","  return train_dataset, val_dataset, test_dataset"]},{"cell_type":"code","execution_count":9,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":667016,"status":"ok","timestamp":1743602301715,"user":{"displayName":"Adam Stechishin","userId":"05403370840446889218"},"user_tz":240},"id":"no3gssIFfM5c","outputId":"ef7f6e88-6258-4f52-9dfb-ca655448b473"},"outputs":[{"output_type":"stream","name":"stdout","text":["Loading FER2013 dataset from Deeplake...\n","hub://activeloop/fer2013-train loaded successfully.\n","This dataset can be visualized in Jupyter Notebook by ds.visualize() or at https://app.activeloop.ai/activeloop/fer2013-train\n","hub://activeloop/fer2013-public-test loaded successfully.\n","This dataset can be visualized in Jupyter Notebook by ds.visualize() or at https://app.activeloop.ai/activeloop/fer2013-public-test\n","hub://activeloop/fer2013-private-test loaded successfully.\n","This dataset can be visualized in Jupyter Notebook by ds.visualize() or at https://app.activeloop.ai/activeloop/fer2013-private-test\n","Extracting sample 0\n","Extracting sample 750\n","Extracting sample 1500\n","Extracting sample 2250\n","Extracting sample 3000\n","Extracting sample 3750\n","Extracting sample 4500\n","Extracting sample 5250\n","Extracting sample 6000\n","Skipping image 6458 with fewer than four colors\n","Extracting sample 6750\n","Extracting sample 7500\n","Skipping image 7629 with fewer than four colors\n","Extracting sample 8250\n","Extracting sample 9000\n","Extracting sample 9750\n","Skipping image 10423 with fewer than four colors\n","Extracting sample 10500\n","Extracting sample 11250\n","Skipping image 11286 with fewer than four colors\n","Extracting sample 12000\n","Extracting sample 12750\n","Skipping image 13148 with fewer than four colors\n","Skipping image 13402 with fewer than four colors\n","Extracting sample 13500\n","Skipping image 13988 with fewer than four colors\n","Extracting sample 14250\n","Extracting sample 0\n","Extracting sample 750\n","Skipping image 1293 with fewer than four colors\n","Extracting sample 1500\n","Extracting sample 0\n","Extracting sample 750\n","Extracting sample 1500\n","Finished loading 50.0% of FER2013 dataset from Deeplake.\n","Dataset loaded: 24948 training, 2996 validation, 3094 test samples\n"]}],"source":["#create training, validation and testing data\n","# train_dataset, val_dataset, test_dataset = load_fer2013_data()\n","train_dataset, val_dataset, test_dataset = load_fer2013_data_deeplake()"]},{"cell_type":"code","execution_count":10,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":162,"status":"ok","timestamp":1743602570678,"user":{"displayName":"Adam Stechishin","userId":"05403370840446889218"},"user_tz":240},"id":"GoBL3CcIxVrQ","outputId":"7bdd94f1-c8e7-48ed-b15a-140c05ac482a"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(tensor([[[[-1.0000, -1.0000, -1.0000,  ..., -0.6078, -1.0000, -1.0000],\n","           [-1.0000, -1.0000, -1.0000,  ..., -0.7020, -1.0000, -1.0000],\n","           [-0.5922, -0.5216, -0.5529,  ..., -0.7098, -1.0000, -1.0000],\n","           ...,\n","           [-1.0000, -1.0000, -0.2157,  ..., -0.3176, -0.3176, -0.3412],\n","           [-1.0000, -1.0000, -0.5059,  ..., -1.0000, -1.0000, -1.0000],\n","           [-1.0000, -1.0000, -0.6627,  ..., -1.0000, -1.0000, -1.0000]]],\n"," \n"," \n","         [[[-1.0000, -1.0000, -1.0000,  ...,  0.1059,  0.0745, -1.0000],\n","           [ 0.1765,  0.1529,  0.2157,  ..., -0.0353,  0.1451, -1.0000],\n","           [ 0.1686,  0.1686,  0.2000,  ..., -0.2157,  0.0902, -1.0000],\n","           ...,\n","           [-1.0000,  0.5451,  0.0039,  ...,  0.5451,  0.4588,  0.4275],\n","           [-1.0000,  0.4745,  0.4745,  ...,  0.3412,  0.5137,  0.4353],\n","           [-1.0000,  0.4745,  0.4667,  ..., -1.0000, -1.0000, -1.0000]]],\n"," \n"," \n","         [[[-1.0000, -1.0000, -1.0000,  ..., -1.0000, -1.0000, -1.0000],\n","           [-1.0000, -1.0000, -1.0000,  ..., -1.0000, -1.0000, -1.0000],\n","           [-1.0000, -1.0000, -1.0000,  ..., -1.0000, -1.0000, -1.0000],\n","           ...,\n","           [-1.0000, -1.0000, -1.0000,  ..., -1.0000, -1.0000, -1.0000],\n","           [-1.0000, -1.0000, -1.0000,  ..., -1.0000, -1.0000, -1.0000],\n","           [-1.0000, -1.0000, -1.0000,  ..., -1.0000, -1.0000, -1.0000]]],\n"," \n"," \n","         ...,\n"," \n"," \n","         [[[-1.0000, -0.3490, -0.3412,  ..., -1.0000, -1.0000, -1.0000],\n","           [-1.0000, -0.3412, -0.3176,  ..., -0.4353, -0.4196, -0.3961],\n","           [-1.0000, -0.3490, -0.3255,  ..., -0.4510, -0.4118, -0.3804],\n","           ...,\n","           [-0.4588, -0.4118, -0.4745,  ..., -0.5059, -0.5373, -1.0000],\n","           [-0.3725, -0.3961, -0.5373,  ..., -0.3961, -0.5294, -1.0000],\n","           [-1.0000, -1.0000, -1.0000,  ..., -0.4588, -0.4039, -1.0000]]],\n"," \n"," \n","         [[[-1.0000, -1.0000, -1.0000,  ..., -1.0000, -1.0000, -1.0000],\n","           [-1.0000, -1.0000, -1.0000,  ..., -1.0000, -1.0000, -1.0000],\n","           [-1.0000, -1.0000, -1.0000,  ..., -1.0000, -1.0000, -1.0000],\n","           ...,\n","           [-1.0000, -1.0000, -1.0000,  ..., -1.0000, -1.0000, -1.0000],\n","           [-1.0000, -1.0000, -1.0000,  ..., -1.0000, -1.0000, -1.0000],\n","           [-1.0000, -1.0000, -1.0000,  ..., -1.0000, -1.0000, -1.0000]]],\n"," \n"," \n","         [[[-1.0000, -1.0000, -1.0000,  ..., -1.0000, -1.0000, -1.0000],\n","           [-1.0000, -1.0000, -1.0000,  ..., -1.0000, -1.0000, -1.0000],\n","           [-1.0000, -1.0000, -1.0000,  ..., -1.0000, -1.0000, -1.0000],\n","           ...,\n","           [-1.0000, -1.0000, -1.0000,  ..., -1.0000, -1.0000, -1.0000],\n","           [-1.0000, -1.0000, -1.0000,  ..., -1.0000, -1.0000, -1.0000],\n","           [-1.0000, -1.0000, -1.0000,  ..., -1.0000, -1.0000, -1.0000]]]]),\n"," tensor([0, 0, 2, 4, 6, 2, 4, 3, 3, 2]))"]},"metadata":{},"execution_count":10}],"source":["train_dataset[:10]"]},{"cell_type":"code","execution_count":11,"metadata":{"id":"JjoxvNhFurIH","executionInfo":{"status":"ok","timestamp":1743602573962,"user_tz":240,"elapsed":3,"user":{"displayName":"Adam Stechishin","userId":"05403370840446889218"}}},"outputs":[],"source":["train_image_data, train_label_data = train_dataset[:]\n","val_image_data, val_label_data = val_dataset[:]\n","test_image_data, test_label_data = test_dataset[:]\n","\n","train_image_data = train_image_data.numpy()\n","train_label_data = train_label_data.numpy()\n","\n","val_image_data = val_image_data.numpy()\n","val_label_data = val_label_data.numpy()\n","\n","test_image_data = test_image_data.numpy()\n","test_label_data = test_label_data.numpy()"]},{"cell_type":"code","source":["train_image_reshaped = train_image_data.reshape(len(train_image_data), 48 * 48)\n","train_label_reshaped = train_label_data.reshape(len(train_label_data))\n","\n","val_image_reshaped = val_image_data.reshape(len(val_image_data), 48 * 48)\n","val_label_reshaped = val_label_data.reshape(len(val_label_data))\n","\n","test_image_reshaped = test_image_data.reshape(len(test_image_data), 48 * 48)\n","test_label_reshaped = test_label_data.reshape(len(test_label_data))"],"metadata":{"id":"yY8FmJNPzCGP","executionInfo":{"status":"ok","timestamp":1743602577209,"user_tz":240,"elapsed":2,"user":{"displayName":"Adam Stechishin","userId":"05403370840446889218"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["train_image_reshaped.shape, train_label_reshaped.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"s6HSO3OJzzBu","executionInfo":{"status":"ok","timestamp":1743602578621,"user_tz":240,"elapsed":4,"user":{"displayName":"Adam Stechishin","userId":"05403370840446889218"}},"outputId":"0dbcce8b-a662-4126-d0bb-7e164aeb6e2c"},"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((24948, 2304), (24948,))"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","execution_count":14,"metadata":{"id":"eP1SAS2XettM","executionInfo":{"status":"ok","timestamp":1743602579963,"user_tz":240,"elapsed":3,"user":{"displayName":"Adam Stechishin","userId":"05403370840446889218"}}},"outputs":[],"source":["#create model\n","random_forest = RandomForestClassifier(random_state = 360)"]},{"cell_type":"code","execution_count":15,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":80},"executionInfo":{"elapsed":173017,"status":"ok","timestamp":1743602754482,"user":{"displayName":"Adam Stechishin","userId":"05403370840446889218"},"user_tz":240},"id":"2XU97SS3goyq","outputId":"697b01de-66c1-4083-ec51-8bac6360c235"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["RandomForestClassifier(random_state=360)"],"text/html":["<style>#sk-container-id-1 {\n","  /* Definition of color scheme common for light and dark mode */\n","  --sklearn-color-text: #000;\n","  --sklearn-color-text-muted: #666;\n","  --sklearn-color-line: gray;\n","  /* Definition of color scheme for unfitted estimators */\n","  --sklearn-color-unfitted-level-0: #fff5e6;\n","  --sklearn-color-unfitted-level-1: #f6e4d2;\n","  --sklearn-color-unfitted-level-2: #ffe0b3;\n","  --sklearn-color-unfitted-level-3: chocolate;\n","  /* Definition of color scheme for fitted estimators */\n","  --sklearn-color-fitted-level-0: #f0f8ff;\n","  --sklearn-color-fitted-level-1: #d4ebff;\n","  --sklearn-color-fitted-level-2: #b3dbfd;\n","  --sklearn-color-fitted-level-3: cornflowerblue;\n","\n","  /* Specific color for light theme */\n","  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n","  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-icon: #696969;\n","\n","  @media (prefers-color-scheme: dark) {\n","    /* Redefinition of color scheme for dark theme */\n","    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n","    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-icon: #878787;\n","  }\n","}\n","\n","#sk-container-id-1 {\n","  color: var(--sklearn-color-text);\n","}\n","\n","#sk-container-id-1 pre {\n","  padding: 0;\n","}\n","\n","#sk-container-id-1 input.sk-hidden--visually {\n","  border: 0;\n","  clip: rect(1px 1px 1px 1px);\n","  clip: rect(1px, 1px, 1px, 1px);\n","  height: 1px;\n","  margin: -1px;\n","  overflow: hidden;\n","  padding: 0;\n","  position: absolute;\n","  width: 1px;\n","}\n","\n","#sk-container-id-1 div.sk-dashed-wrapped {\n","  border: 1px dashed var(--sklearn-color-line);\n","  margin: 0 0.4em 0.5em 0.4em;\n","  box-sizing: border-box;\n","  padding-bottom: 0.4em;\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","#sk-container-id-1 div.sk-container {\n","  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n","     but bootstrap.min.css set `[hidden] { display: none !important; }`\n","     so we also need the `!important` here to be able to override the\n","     default hidden behavior on the sphinx rendered scikit-learn.org.\n","     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n","  display: inline-block !important;\n","  position: relative;\n","}\n","\n","#sk-container-id-1 div.sk-text-repr-fallback {\n","  display: none;\n","}\n","\n","div.sk-parallel-item,\n","div.sk-serial,\n","div.sk-item {\n","  /* draw centered vertical line to link estimators */\n","  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n","  background-size: 2px 100%;\n","  background-repeat: no-repeat;\n","  background-position: center center;\n","}\n","\n","/* Parallel-specific style estimator block */\n","\n","#sk-container-id-1 div.sk-parallel-item::after {\n","  content: \"\";\n","  width: 100%;\n","  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n","  flex-grow: 1;\n","}\n","\n","#sk-container-id-1 div.sk-parallel {\n","  display: flex;\n","  align-items: stretch;\n","  justify-content: center;\n","  background-color: var(--sklearn-color-background);\n","  position: relative;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item {\n","  display: flex;\n","  flex-direction: column;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item:first-child::after {\n","  align-self: flex-end;\n","  width: 50%;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item:last-child::after {\n","  align-self: flex-start;\n","  width: 50%;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item:only-child::after {\n","  width: 0;\n","}\n","\n","/* Serial-specific style estimator block */\n","\n","#sk-container-id-1 div.sk-serial {\n","  display: flex;\n","  flex-direction: column;\n","  align-items: center;\n","  background-color: var(--sklearn-color-background);\n","  padding-right: 1em;\n","  padding-left: 1em;\n","}\n","\n","\n","/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n","clickable and can be expanded/collapsed.\n","- Pipeline and ColumnTransformer use this feature and define the default style\n","- Estimators will overwrite some part of the style using the `sk-estimator` class\n","*/\n","\n","/* Pipeline and ColumnTransformer style (default) */\n","\n","#sk-container-id-1 div.sk-toggleable {\n","  /* Default theme specific background. It is overwritten whether we have a\n","  specific estimator or a Pipeline/ColumnTransformer */\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","/* Toggleable label */\n","#sk-container-id-1 label.sk-toggleable__label {\n","  cursor: pointer;\n","  display: flex;\n","  width: 100%;\n","  margin-bottom: 0;\n","  padding: 0.5em;\n","  box-sizing: border-box;\n","  text-align: center;\n","  align-items: start;\n","  justify-content: space-between;\n","  gap: 0.5em;\n","}\n","\n","#sk-container-id-1 label.sk-toggleable__label .caption {\n","  font-size: 0.6rem;\n","  font-weight: lighter;\n","  color: var(--sklearn-color-text-muted);\n","}\n","\n","#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n","  /* Arrow on the left of the label */\n","  content: \"▸\";\n","  float: left;\n","  margin-right: 0.25em;\n","  color: var(--sklearn-color-icon);\n","}\n","\n","#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n","  color: var(--sklearn-color-text);\n","}\n","\n","/* Toggleable content - dropdown */\n","\n","#sk-container-id-1 div.sk-toggleable__content {\n","  max-height: 0;\n","  max-width: 0;\n","  overflow: hidden;\n","  text-align: left;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-toggleable__content.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-toggleable__content pre {\n","  margin: 0.2em;\n","  border-radius: 0.25em;\n","  color: var(--sklearn-color-text);\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n","  /* Expand drop-down */\n","  max-height: 200px;\n","  max-width: 100%;\n","  overflow: auto;\n","}\n","\n","#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n","  content: \"▾\";\n","}\n","\n","/* Pipeline/ColumnTransformer-specific style */\n","\n","#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator-specific style */\n","\n","/* Colorize estimator box */\n","#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n","#sk-container-id-1 div.sk-label label {\n","  /* The background is the default theme color */\n","  color: var(--sklearn-color-text-on-default-background);\n","}\n","\n","/* On hover, darken the color of the background */\n","#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","/* Label box, darken color on hover, fitted */\n","#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator label */\n","\n","#sk-container-id-1 div.sk-label label {\n","  font-family: monospace;\n","  font-weight: bold;\n","  display: inline-block;\n","  line-height: 1.2em;\n","}\n","\n","#sk-container-id-1 div.sk-label-container {\n","  text-align: center;\n","}\n","\n","/* Estimator-specific */\n","#sk-container-id-1 div.sk-estimator {\n","  font-family: monospace;\n","  border: 1px dotted var(--sklearn-color-border-box);\n","  border-radius: 0.25em;\n","  box-sizing: border-box;\n","  margin-bottom: 0.5em;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-estimator.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","/* on hover */\n","#sk-container-id-1 div.sk-estimator:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-estimator.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Specification for estimator info (e.g. \"i\" and \"?\") */\n","\n","/* Common style for \"i\" and \"?\" */\n","\n",".sk-estimator-doc-link,\n","a:link.sk-estimator-doc-link,\n","a:visited.sk-estimator-doc-link {\n","  float: right;\n","  font-size: smaller;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1em;\n","  height: 1em;\n","  width: 1em;\n","  text-decoration: none !important;\n","  margin-left: 0.5em;\n","  text-align: center;\n","  /* unfitted */\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-unfitted-level-1);\n","}\n","\n",".sk-estimator-doc-link.fitted,\n","a:link.sk-estimator-doc-link.fitted,\n","a:visited.sk-estimator-doc-link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","/* Span, style for the box shown on hovering the info icon */\n",".sk-estimator-doc-link span {\n","  display: none;\n","  z-index: 9999;\n","  position: relative;\n","  font-weight: normal;\n","  right: .2ex;\n","  padding: .5ex;\n","  margin: .5ex;\n","  width: min-content;\n","  min-width: 20ex;\n","  max-width: 50ex;\n","  color: var(--sklearn-color-text);\n","  box-shadow: 2pt 2pt 4pt #999;\n","  /* unfitted */\n","  background: var(--sklearn-color-unfitted-level-0);\n","  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n","}\n","\n",".sk-estimator-doc-link.fitted span {\n","  /* fitted */\n","  background: var(--sklearn-color-fitted-level-0);\n","  border: var(--sklearn-color-fitted-level-3);\n","}\n","\n",".sk-estimator-doc-link:hover span {\n","  display: block;\n","}\n","\n","/* \"?\"-specific style due to the `<a>` HTML tag */\n","\n","#sk-container-id-1 a.estimator_doc_link {\n","  float: right;\n","  font-size: 1rem;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1rem;\n","  height: 1rem;\n","  width: 1rem;\n","  text-decoration: none;\n","  /* unfitted */\n","  color: var(--sklearn-color-unfitted-level-1);\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","}\n","\n","#sk-container-id-1 a.estimator_doc_link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","#sk-container-id-1 a.estimator_doc_link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","}\n","</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(random_state=360)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>RandomForestClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.ensemble.RandomForestClassifier.html\">?<span>Documentation for RandomForestClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestClassifier(random_state=360)</pre></div> </div></div></div></div>"]},"metadata":{},"execution_count":15}],"source":["#train model\n","random_forest.fit(train_image_reshaped, train_label_reshaped)"]},{"cell_type":"code","execution_count":16,"metadata":{"id":"EzvLC1ZaofZD","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1743602844317,"user_tz":240,"elapsed":242,"user":{"displayName":"Adam Stechishin","userId":"05403370840446889218"}},"outputId":"156ef6e1-61ab-4952-e5dc-4a9079a3a5fb"},"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       0.25      0.22      0.23       428\n","           1       0.75      0.17      0.28       428\n","           2       0.20      0.19      0.20       428\n","           3       0.33      0.50      0.40       428\n","           4       0.26      0.29      0.27       428\n","           5       0.48      0.55      0.51       428\n","           6       0.26      0.31      0.28       428\n","\n","    accuracy                           0.32      2996\n","   macro avg       0.36      0.32      0.31      2996\n","weighted avg       0.36      0.32      0.31      2996\n","\n"]}],"source":["#compute metrics for validation data\n","predictions_val = random_forest.predict(val_image_reshaped)\n","print(classification_report(val_label_reshaped, predictions_val))"]},{"cell_type":"code","source":["#compute metrics for testing data\n","predictions_test = random_forest.predict(test_image_reshaped)\n","print(classification_report(test_label_reshaped, predictions_test))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MtYHx8EP85ze","executionInfo":{"status":"ok","timestamp":1743602858357,"user_tz":240,"elapsed":222,"user":{"displayName":"Adam Stechishin","userId":"05403370840446889218"}},"outputId":"4866b864-a7f0-4f10-f073-9634b07669d6"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       0.28      0.25      0.26       442\n","           1       0.77      0.23      0.35       442\n","           2       0.24      0.21      0.23       442\n","           3       0.33      0.51      0.40       442\n","           4       0.25      0.29      0.27       442\n","           5       0.44      0.50      0.47       442\n","           6       0.31      0.34      0.32       442\n","\n","    accuracy                           0.33      3094\n","   macro avg       0.37      0.33      0.33      3094\n","weighted avg       0.37      0.33      0.33      3094\n","\n"]}]},{"cell_type":"code","source":["def plot_images(index, dataset):\n","  for i in range(index):\n","    image, _ = dataset[i]\n","    img = np.transpose(image, [1, 2, 0])\n","    plt.subplot(1, index, i + 1)\n","    plt.axis(\"off\")\n","    plt.imshow(img)"],"metadata":{"id":"nVmclXz5iLbQ","executionInfo":{"status":"ok","timestamp":1743602877426,"user_tz":240,"elapsed":2,"user":{"displayName":"Adam Stechishin","userId":"05403370840446889218"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","source":["plot_images(10, test_dataset)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":79},"id":"McSV2U2fjYFO","executionInfo":{"status":"ok","timestamp":1743602879865,"user_tz":240,"elapsed":337,"user":{"displayName":"Adam Stechishin","userId":"05403370840446889218"}},"outputId":"12da3455-9547-4746-85c5-aabe070434bc"},"execution_count":19,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 10 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["test_dataset[:50]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"olqQmeKUkVx0","executionInfo":{"status":"ok","timestamp":1743602881694,"user_tz":240,"elapsed":11,"user":{"displayName":"Adam Stechishin","userId":"05403370840446889218"}},"outputId":"34c4a984-2f14-4ce1-9b1d-1ed24b224672"},"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(tensor([[[[-1.0000,  0.0039, -0.0275,  ..., -1.0000, -1.0000, -1.0000],\n","           [-1.0000, -0.0902, -0.1059,  ..., -0.3098, -0.3098, -0.2078],\n","           [-1.0000, -0.1451, -0.1843,  ..., -0.2627, -0.1529, -0.0196],\n","           ...,\n","           [ 0.0196,  0.2706,  0.4039,  ..., -0.2314, -0.3490, -1.0000],\n","           [ 0.2471,  0.3647,  0.4902,  ..., -0.1686, -0.2392, -1.0000],\n","           [-1.0000, -1.0000, -1.0000,  ..., -0.1765, -0.3569, -1.0000]]],\n"," \n"," \n","         [[[-1.0000, -1.0000, -0.9451,  ..., -1.0000, -1.0000, -1.0000],\n","           [-1.0000, -1.0000, -0.9451,  ..., -1.0000, -1.0000, -1.0000],\n","           [-1.0000, -1.0000, -0.9373,  ..., -0.6314, -0.5765, -0.8588],\n","           ...,\n","           [-0.7804, -0.7804, -0.9059,  ..., -0.4667, -1.0000, -1.0000],\n","           [-1.0000, -1.0000, -1.0000,  ..., -0.4980, -1.0000, -1.0000],\n","           [-1.0000, -1.0000, -1.0000,  ..., -0.5373, -1.0000, -1.0000]]],\n"," \n"," \n","         [[[ 0.8196,  0.8824,  0.8902,  ...,  0.8431,  0.8275,  0.8431],\n","           [ 0.8039,  0.8667,  0.8980,  ...,  0.8510,  0.8196,  0.8353],\n","           [ 0.7882,  0.8431,  0.8902,  ...,  0.8510,  0.8118,  0.8196],\n","           ...,\n","           [ 0.8824, -0.0902, -0.2471,  ..., -0.9843, -0.9922, -0.9843],\n","           [ 0.8745,  0.2000, -0.2706,  ..., -0.9765, -0.9843, -0.9686],\n","           [ 0.8196,  0.4667, -0.0510,  ..., -0.9686, -0.9686, -0.9294]]],\n"," \n"," \n","         ...,\n"," \n"," \n","         [[[-1.0000, -1.0000, -1.0000,  ..., -1.0000, -1.0000, -1.0000],\n","           [-1.0000, -1.0000, -1.0000,  ..., -1.0000, -1.0000, -1.0000],\n","           [-1.0000, -1.0000, -1.0000,  ..., -1.0000, -1.0000, -1.0000],\n","           ...,\n","           [-1.0000, -1.0000, -1.0000,  ..., -1.0000, -1.0000, -1.0000],\n","           [-1.0000, -1.0000, -1.0000,  ..., -1.0000, -1.0000, -1.0000],\n","           [-1.0000, -1.0000, -1.0000,  ..., -1.0000, -1.0000, -1.0000]]],\n"," \n"," \n","         [[[-1.0000, -1.0000, -1.0000,  ..., -1.0000, -1.0000, -1.0000],\n","           [-1.0000, -1.0000, -1.0000,  ..., -1.0000, -1.0000, -1.0000],\n","           [-1.0000, -1.0000, -1.0000,  ..., -1.0000, -1.0000, -1.0000],\n","           ...,\n","           [-1.0000, -1.0000, -1.0000,  ..., -1.0000, -1.0000, -1.0000],\n","           [-1.0000, -1.0000, -1.0000,  ..., -1.0000, -1.0000, -1.0000],\n","           [-1.0000, -1.0000, -1.0000,  ..., -1.0000, -1.0000, -1.0000]]],\n"," \n"," \n","         [[[-1.0000, -1.0000, -1.0000,  ..., -1.0000, -1.0000, -1.0000],\n","           [-1.0000, -1.0000, -1.0000,  ..., -1.0000, -1.0000, -1.0000],\n","           [-1.0000, -1.0000, -1.0000,  ..., -1.0000, -1.0000, -1.0000],\n","           ...,\n","           [-1.0000, -1.0000, -1.0000,  ..., -1.0000, -1.0000, -1.0000],\n","           [-1.0000, -1.0000, -1.0000,  ..., -1.0000, -1.0000, -1.0000],\n","           [-1.0000, -1.0000, -1.0000,  ..., -1.0000, -1.0000, -1.0000]]]]),\n"," tensor([0, 5, 6, 4, 2, 0, 4, 3, 0, 3, 5, 3, 4, 4, 0, 6, 2, 5, 4, 2, 3, 6, 0, 6,\n","         3, 2, 5, 6, 6, 3, 4, 6, 6, 0, 1, 3, 5, 0, 0, 4, 6, 4, 2, 4, 2, 4, 3, 6,\n","         3, 3]))"]},"metadata":{},"execution_count":20}]}],"metadata":{"colab":{"provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}